#!/usr/bin/env bash
#
# Summary: Create symlinks to your hermit dir files
#
# Usage: hermit link
#
# Sets up the symbolic links for all the files and directories in your
# hermit directory.
#
# Link supports an ignore file similar in format to a .gitignore
# file. The file should be named .hignore, and each line of the file
# is a single pattern of file to be ignored. The patterns that are
# allowed are the same patterns acknowledged by the -path option of
# the find utility.
#
# NOTE: Unlike a .gitignore, prefixing a pattern with a slash will not
# restrict the pattern to matching files in the current directory.  It
# will probably just cause it to match nothing.

# Copyright 2014, Geoff Shannon

# This file is part of Hermit.

# Hermit is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hermit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Hermit. If not, see <http://www.gnu.org/licenses/>.

set -e
[ -n "$HERMIT_DEBUG" ] && set -x

pushd 2>&1 >/dev/null $HERMIT_PROFILE_PATH

{
    # Print the list of all files, but don't recurse into the .git folder
    find . -type f -o -type d -name .git -prune

    # Print out all .hignore files a second time so we ignore them
    find . -type f -name .hignore

    # Concatenate a listing of all .hignore files, with the path to the
    # ignore file it came from prefixed to each pattern
    {
        # Process all directories with a .hignore file
        find -X . -type f -name .hignore | xargs -n1 dirname |
        while read dir
        do
            # Prefix the contents of each .hignore file with the path
            # to the file it came from
            sed 's|^|'"$dir/"'|' "$dir"/.hignore
        done

        # And finally, print out all of the files that match each of the
        # patterns from all .hignore files. Using find and the -path
        # option allows us to respect the relative placement of each
        # pattern in the directory hiearchy.
    } | xargs -n1 find . -type d -name .git -prune -o -type f -path

    # Now, sort and then print only the unique lines.  This works
    # because anything that matched an ignored pattern was printed
    # once by the first find, and then once by the ignore find, thus
    # duplicating it. Also, remove the leading ./
} | sort | uniq -u | cut -c3- |
while read file
do
    # $file is a relative path, so we can find the right place for it
    # by just concatenating with $HOME
    basefile=$HOME/$file

    # Check for a symlink
    if [ -L $basefile ]
    then
        if [ "$($READLINK $basefile)" = "$file" ]
        then
            echo "$file is already linked!"
        else
            echo "There is already a symbolic link at $basefile"
            echo "But it doesn't point to $file."
        fi
        continue

    # Check for a regular file.  Order matters here, -f will match a
    # symlink too!
    elif [ -f $basefile ]
    then
        echo "There's a real file at $basefile!"
        echo "We can't create a link there."
        continue

    # Check if there is a directory.
    elif [ -d $basefile ]
    then
        echo "There's a real directory at $basefile"
        echo "We can't create a link there."
        continue
    fi

    # Since we've done lots of checks already, this should work
    ln -s $HERMIT_PROFILE_PATH/$file $basefile

done

popd 2>&1 >/dev/null
