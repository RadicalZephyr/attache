#!/usr/bin/env bash
#
# Summary: Update redacted files already stored in git
# Usage: hermit update [[-r|--redact=] <filepattern>â€¦]
#
# Update takes a path (or paths) to some files or directories in your
# home folder. For all the files that are already being tracked by
# Hermit, you are given the opportunity to redact the file.  The
# semantics of the redaction are the same as when passing a -r option
# to hermit add.
#
# -r <file>, --redact=<file>
#     Redact secrets from a file before it is added to hermit.
#
# It should be pointed out that attempting to redact information that
# has already been committed to the git repository is TOTALLY
# INEFFECTIVE.

# Copyright 2014, Geoff Shannon

# This file is part of Hermit.

# Hermit is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hermit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Hermit. If not, see <http://www.gnu.org/licenses/>.

set -e
[ -n "$HERMIT_DEBUG" ] && set -x

if [ "$1" = "--complete" ]; then
    exit
fi

source $(dirname $0)/utilities

check_git_config
check_hermit_profile


REDACTING=false

for file in $@
do
    if [ "$file" = "-r" ]; then
        REDACTING=true
        continue
    elif [ "$file" != "${file#--redact=}" ]; then
        REDACTING=true
        file="${file#--redact=}"
    fi

    file="$(absolute_path "$file")"

    file="$(files_when_dir "$file")"

    for origfile in $file
    do

        if [ -L "$origfile" ]; then

            newfile="$(hermit_relative_path "$origfile")"
            link_target=$($READLINK "$origfile")

            completefile="$(complete_filename "$newfile")"
            redactfile="$(redact_filename "$newfile")"
            secretfile="$(secret_filename "$newfile")"

            if [ "$link_target" != "$newfile" -a \
                 "$link_target" != "$completefile" ]; then
                echo >&2 "hermit: This symlink is not handled by hermit: $origfile"
                echo >&2
                continue
            fi

            if [ -f "$completefile" -a -f "$redactfile" -a -f "$secretfile" ]; then
                intermediatefile="${newfile}.intermediate"

                copy_verbosely "$completefile" "$intermediatefile"

                # Rev. patch the intermediate file.  This preserves
                # changes, but removes known secrets.
                patch -R "$intermediatefile" "$secretfile"

                pushd "$HERMIT_PROFILE_PATH" >/dev/null 2>&1
                if git diff --quiet "$redactfile"; then
                    remove_verbosely "$redactfile"
                    move_verbosely "$intermediatefile" "$redactfile"
                else
                    echo >&2 "hermit: Changes were made to $redactfile"
                    echo >&2 "        Please only make changes to $completefile"
                    echo >&2
                    continue
                fi
                popd >/dev/null 2>&1
            fi

            if [ "$REDACTING" = "true" ]; then
                hermit_do_redaction "$newfile"
            fi

        elif [ -f "$origfile" ]; then
            echo >&2 "hermit: update only works on files already tracked by hermit."
            echo >&2 "$origfile can be added to hermit with 'hermit add $origfile'"
            echo >&2

        fi

    done
    REDACTING=false
done
