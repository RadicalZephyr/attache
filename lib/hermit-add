#!/usr/bin/env bash
#
# Summary: Add files to your hermit directory
# Usage: hermit add [[-r|--redact=] <filepattern>â€¦]
#
# Add takes a path (or paths) to some files and directories in your
# home folder, and moves them into your active hermit profile, and
# then creates a symlink to this moved file in the original location.
#
# Adding a directory is essentially a shorthand for adding all files
# in that directory tree.
#
#  Note: you must have an initialized hermit profile.
#
# -r <file>, --redact=<file>
#     Redact secrets from a file before it is added to hermit.
#
# File Redaction
#
# When you ask hermit to let you redact a file, there are several
# differences from the normal add process. First, hermit will make a
# copy of the original file inside your hermit profile.  Then, you are
# given the chance to edit this copy to remove any sensitive
# information. This will be the "redacted file" and given the suffix
# ".redacted".
#
# Next, the original file is moved to your hermit directory and git is
# directed to ignore it. The secrets that were edited out of the
# original file are then placed into a file with the suffix ".secrets"
# and are also ignored by git. Hermit can optionally encrypt this file
# using GPG and then you can commit the encrypted version.

# Copyright 2014, Geoff Shannon

# This file is part of Hermit.

# Hermit is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hermit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Hermit. If not, see <http://www.gnu.org/licenses/>.

set -e
[ -n "$HERMIT_DEBUG" ] && set -x

check-git-config
check-hermit-profile

source $(dirname $0)/utilities


REDACTING=false

for file in $@
do
    if [ "$file" = "-r" ]
    then
        REDACTING=true
        continue
    elif [ "$file" \!= "${file#--redact=}" ]
    then
        REDACTING=true
        file="${file#--redact=}"
    fi

    # Check for absolute or relative path
    if [ "" != "${file%%/*}" ]
    then
        # If it's relative though, we need to assume that it is
        # relative to the current directory
        file="$PWD/$file"
    fi

    if [ -d $file ]
    then
        file=$(find $file -type d -name .git -prune -o -type f)
    fi

    for origfile in $file
    do
        newfile="$(hermit_relative_path "$origfile")"

        if [ -f $newfile ]
        then
            echo "${origfile#~/} is already in your hermit!"
            continue
        fi

        # We always need to move and link these files
        move_verbosely "$origfile" "$newfile"
        link_verbosely "$origfile" "$newfile"

        if [ "$REDACTING" = "true" ]
        then
            completefile="$newfile"
            redactfile="${completefile}.redacted"
            secretfile="${completefile}.${SECRETS_SUFFIX}"

            copy_verbosely "$completefile" "$redactfile"

            ${EDITOR:-editor} "$redactfile"

            diff -u "$redactfile" "$completefile" > "$secretfile" || true

            pushd "$HERMIT_PROFILE_PATH" >/dev/null 2>&1

            git add "$redactfile"

            popd >/dev/null 2>&1

            echo "Ignoring original file and secret file: ${completefile#~/}, ${secretfile#~/}"
            hermit_ignore_files "$completefile" "$secretfile"

            echo "Relinking the original file to point at the complete file."

            remove_verbosely "$origfile"
            link_verbosely "$origfile" "$completefile"
        fi

    done
    REDACTING=false
done
