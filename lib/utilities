hermit_relative_path() {
    local origfile="$1"
    echo "$HERMIT_PROFILE_PATH/${origfile#~/}"
}

absolute_path() {
    local file="$1"
    # Check for absolute or relative path
    if [ "" != "${file%%/*}" ]; then
        # If it's relative though, we need to assume that it is
        # relative to the current directory
        file="$PWD/$file"
    fi
    echo $file
}

hermit_ignore_files() {
    for file in $@
    do
        echo "${file#$HERMIT_PROFILE_PATH}" >> "$HERMIT_PROFILE_PATH/.gitignore"
    done
}

hermit_print_profiles() {
    profile_dir="$HERMIT_ROOT/profiles"
    find "$profile_dir" -maxdepth 1 -type d | cut -c$((${#profile_dir}+2))- | grep -v '^$'
}

complete_filename() {
    local file="$1"
    echo "${file}.${COMPLETE_SUFFIX}"
}

redact_filename() {
    local file="$1"
    echo "${file}"
}

secret_filename() {
    local file="$1"
    echo "${file}.${SECRETS_SUFFIX}"
}

hermit_do_redaction() {
    local file="$1"

    local completefile="$(complete_filename "$file")"
    local redactfile="$(redact_filename "$file")"
    local secretfile="$(secret_filename "$file")"

    # Make sure that both completefile and redactfile have the same content
    # At least one of these will fail
    copy_verbosely "$file" "$completefile"
    copy_verbosely "$file" "$redactfile"

    ${EDITOR:-editor} "$redactfile"

    diff -u "$redactfile" "$completefile" > "$secretfile" || true

    pushd "$HERMIT_PROFILE_PATH" >/dev/null 2>&1

    echo "Attempting to encrypt secrets file"

    # Test for existence of gpg command and that the current user has
    # a secret key
    if (which gpg && gpg -K $(whoami)) >/dev/null 2>&1; then
        gpg -se -r $(whoami) "$secretfile" \
            --output "${secretfile}.${ENCRYPTED_SECRETS_SUFFIX}" \
            && git add "${secretfile}.gpg"
    fi

    git add "$redactfile"

    popd >/dev/null 2>&1

    echo "Relinking the original file to point at the complete file."

    remove_verbosely "$origfile"
    link_verbosely "$origfile" "$completefile"
}

files_when_dir() {
    local file="$1"
    if [ -d "$file" ]; then
        find "$file" -type d -name .git -prune -o -type f -print -o -type l -print
    else
        echo "$file"
    fi
}

move_verbosely() {
    local origfile="$1"
    local newfile="$2"

    mkdir -vp $(dirname $newfile)
    echo "mv: $(mv -vn "$origfile" "$newfile" 2>&1)"
}

link_verbosely() {
    local origfile="$1"
    local newfile="$2"

    echo "ln: $(ln -vs "$newfile" "$origfile" 2>&1)"
}

copy_verbosely() {
    local origfile="$1"
    local newfile="$2"

    echo "cp: $(cp -vn "$origfile" "$newfile" 2>&1)"
}

remove_verbosely() {
    local origfile="$1"

    echo "rm: $(rm -v "$origfile" 2>&1)"
}

check_hermit_profile() {
    if [ \! -d $HERMIT_PROFILE_PATH ]; then
        echo "Your profile hasn't been initialized yet, try" \
             "running 'hermit init'"
        return 1
    fi
    return 0
}

check_git_config() {
    if git config --global user.name  > /dev/null &&
       git config --global user.email > /dev/null; then
        :
    else
        echo -e 'Please set your git name and email with:\n
  git config --global user.name "Your Name"
  git config --global user.email "you@example.com"'
        echo
        return 1
    fi
    return 0
}

yn_prompt() {
    local ans
    local ok=0

    while [ "$ok" = 0 ]
    do
        read -p "$1"" (yes/no): " ans
        ans=$(tr '[:upper:]' '[:lower:]' <<<"$ans")
        case "$ans" in
            'y' | 'yes' | 'n' | 'no' ) ok=1 ;;
            * ) echo "Valid answers are: yes, y, no, n" ;;
        esac
    done

    [ "$ans" = "y" -o "$ans" = "yes" ]
}

get_current_profile() {
    pushd "$HERMIT_ROOT" >/dev/null 2>&1
    local profile=$(git config $HERMIT_CURRENT_KEY | head -1)
    popd >/dev/null 2>&1
    echo $profile
}

set_current_profile() {
    pushd "$HERMIT_ROOT" >/dev/null 2>&1
    git config $HERMIT_CURRENT_KEY $1
    popd >/dev/null 2>&1
}
